name: CI/CD Pipeline for Gestion de BibliothÃ¨que

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  POSTGRES_DB: devops_db
  POSTGRES_USER: devops_user
  POSTGRES_PASSWORD: devops_pass
  POSTGRES_HOST: db
  DJANGO_SECRET_KEY: your-secret-key-here
  DJANGO_DEBUG: True
  CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
  GF_SECURITY_ADMIN_USER: admin
  GF_SECURITY_ADMIN_PASSWORD: admin

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: devops_db
          POSTGRES_USER: devops_user
          POSTGRES_PASSWORD: devops_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ env.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ env.DJANGO_DEBUG }}" >> .env
          echo "CELERY_BROKER_URL=${{ env.CELERY_BROKER_URL }}" >> .env
          echo "GF_SECURITY_ADMIN_USER=${{ env.GF_SECURITY_ADMIN_USER }}" >> .env
          echo "GF_SECURITY_ADMIN_PASSWORD=${{ env.GF_SECURITY_ADMIN_PASSWORD }}" >> .env

      - name: Create wait-for-db.sh
        run: |
          echo '#!/bin/bash' > server/wait-for-db.sh
          echo 'set -e' >> server/wait-for-db.sh
          echo 'until psql -h db -U devops_user -d devops_db -c "\\q" 2>/dev/null; do' >> server/wait-for-db.sh
          echo '  echo "Waiting for PostgreSQL to be ready..."' >> server/wait-for-db.sh
          echo '  sleep 2' >> server/wait-for-db.sh
          echo 'done' >> server/wait-for-db.sh
          chmod +x server/wait-for-db.sh

      - name: Create prometheus.yml
        run: |
          echo 'scrape_configs:' > prometheus.yml
          echo '  - job_name: "django"' >> prometheus.yml
          echo '    metrics_path: "/metrics"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["server:8000"]' >> prometheus.yml
          echo '  - job_name: "prometheus"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["prometheus:9090"]' >> prometheus.yml
          echo '  - job_name: "rabbitmq"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["rabbitmq:15672"]' >> prometheus.yml

      - name: Create grafana.ini
        run: |
          echo '[server]' > grafana.ini
          echo 'http_port = 3000' >> grafana.ini

      - name: Build Docker images
        run: docker-compose build --parallel

      - name: Start services for testing
        run: docker-compose up -d db rabbitmq

      - name: Wait for database
        run: docker-compose run server ./wait-for-db.sh

      - name: Run migrations
        run: |
          docker-compose run server poetry run python manage.py makemigrations
          docker-compose run server poetry run python manage.py migrate

      - name: Run Django tests
        run: docker-compose run server poetry run python manage.py test

      - name: Stop containers
        if: always()
        run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ env.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ env.DJANGO_DEBUG }}" >> .env
          echo "CELERY_BROKER_URL=${{ env.CELERY_BROKER_URL }}" >> .env
          echo "GF_SECURITY_ADMIN_USER=${{ env.GF_SECURITY_ADMIN_USER }}" >> .env
          echo "GF_SECURITY_ADMIN_PASSWORD=${{ env.GF_SECURITY_ADMIN_PASSWORD }}" >> .env

      - name: Create wait-for-db.sh
        run: |
          echo '#!/bin/bash' > server/wait-for-db.sh
          echo 'set -e' >> server/wait-for-db.sh
          echo 'until psql -h db -U devops_user -d devops_db -c "\\q" 2>/dev/null; do' >> server/wait-for-db.sh
          echo '  echo "Waiting for PostgreSQL to be ready..."' >> server/wait-for-db.sh
          echo '  sleep 2' >> server/wait-for-db.sh
          echo 'done' >> server/wait-for-db.sh
          chmod +x server/wait-for-db.sh

      - name: Create prometheus.yml
        run: |
          echo 'scrape_configs:' > prometheus.yml
          echo '  - job_name: "django"' >> prometheus.yml
          echo '    metrics_path: "/metrics"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["server:8000"]' >> prometheus.yml
          echo '  - job_name: "prometheus"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["prometheus:9090"]' >> prometheus.yml
          echo '  - job_name: "rabbitmq"' >> prometheus.yml
          echo '    static_configs:' >> prometheus.yml
          echo '      - targets: ["rabbitmq:15672"]' >> prometheus.yml

      - name: Create grafana.ini
        run: |
          echo '[server]' > grafana.ini
          echo 'http_port = 3000' >> grafana.ini

      - name: Build and deploy
        run: docker-compose up -d --build

      - name: Verify deployment
        run: |
          sleep 10
          curl -f http://localhost:80 || exit 1
          curl -f http://localhost:8000/admin/ || exit 1
          curl -f http://localhost:9090 || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Stop containers
        if: always()
        run: docker-compose down