services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - db
      - rabbitmq
    command: gunicorn server_config.wsgi:application --bind 0.0.0.0:8000
  celery:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
    depends_on:
      - db
      - rabbitmq
    command: celery -A server_config worker --loglevel=info
  celery_beat:
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
    depends_on:
      - db
      - rabbitmq
    command: celery -A server_config beat --loglevel=info
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    command: yarn dev
  nginx:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - server
      - client
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
    ports:
      - "3000:3000"

volumes:
  postgres_data: 